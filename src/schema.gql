# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BoolFilter {
  equals: Boolean
  not: Boolean
}

type Comment {
  id: Float!
  post: Post!
  postId: Float!
  text: String!
  user: User!
  userId: Float!
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentOrderByRelationAggregateInput {
  _count: SortOrder
}

input CommentOrderByWithRelationInput {
  id: SortOrder
  post: PostOrderByWithRelationInput
  postId: SortOrder
  text: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum CommentScalarFieldEnum {
  id
  postId
  text
  userId
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  id: Float!
  post: PostWhereInput!
  postId: Float!
  text: String!
  user: UserWhereInput!
  userId: Float!
}

input CommentWhereUniqueInput {
  id: Float
}

input CreateCommentInput {
  postId: Float!
  text: String!
  userId: Float!
}

input CreatePostInput {
  authorId: Float!
  body: String!
  published: Boolean!
  title: String!
}

input CreateUserInput {
  email: String!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Mutation {
  createComment(createCommentInput: CreateCommentInput!): Comment!
  createPost(createPostInput: CreatePostInput!): Post!
  createUser(createUserInput: CreateUserInput!): User!
  removeComment(where: CommentWhereUniqueInput): Comment!
  removePost(where: PostWhereUniqueInput): Post!
  removeUser(where: UserWhereUniqueInput): User!
  updateComment(updateCommentInput: UpdateCommentInput!): Comment!
  updatePost(updatePostInput: UpdatePostInput!): Post!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

type Post {
  author: User!
  authorId: Float!
  body: String!
  comments: [Comment!]!
  id: Float!
  published: Boolean!
  title: String!
}

input PostListRelationFilter {
  every: PostWhereInput
  none: PostWhereInput
  some: PostWhereInput
}

input PostOrderByRelationAggregateInput {
  _count: SortOrder
}

input PostOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  body: SortOrder
  comments: PostOrderByRelationAggregateInput
  id: SortOrder
  published: SortOrder
  title: SortOrder
}

enum PostScalarFieldEnum {
  authorId
  body
  id
  published
  title
}

input PostWhereInput {
  AND: [PostWhereInput!]
  NOT: [PostWhereInput!]
  OR: [PostWhereInput!]
  author: UserWhereInput!
  authorId: Float!
  body: String!
  comments: CommentListRelationFilter!
  id: Float!
  published: Boolean!
  title: String!
}

input PostWhereUniqueInput {
  id: Float
}

type Query {
  comment(where: CommentWhereUniqueInput): Comment!
  comments(cursor: CommentWhereUniqueInput, distinct: [CommentScalarFieldEnum!], orderBy: [CommentOrderByWithRelationInput!], skip: Float, take: Float, where: CommentWhereInput): [Comment!]!
  post(where: PostWhereUniqueInput): Post!
  posts(cursor: PostWhereUniqueInput, distinct: [PostScalarFieldEnum!], orderBy: [PostOrderByWithRelationInput!], skip: Float, take: Float, where: [PostWhereInput!]): [Post!]!
  user(where: UserWhereUniqueInput): User!
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  default
  insensitive
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input UpdateCommentInput {
  id: Float!
  postId: Float
  text: String
  userId: Float
}

input UpdatePostInput {
  authorId: Float
  body: String
  id: Float!
  published: Boolean
  title: String
}

input UpdateUserInput {
  email: String
  id: Float!
  name: String
}

type User {
  comments: [Comment!]!
  createdAt: DateTime!
  email: String!
  id: Float!
  isAdmin: Boolean!
  name: String!
  posts: [Post!]!
}

input UserOrderByWithRelationInput {
  comments: CommentOrderByRelationAggregateInput
  createdAt: SortOrder
  email: StringFilter
  id: SortOrder!
  isAdmin: BoolFilter
  name: SortOrder
  posts: PostOrderByRelationAggregateInput
}

enum UserScalarFieldEnum {
  createdAt
  email
  id
  isAdmin
  name
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  comments: CommentListRelationFilter!
  createdAt: String!
  email: String!
  id: Float!
  isAdmin: Boolean!
  name: String!
  posts: PostListRelationFilter!
}

input UserWhereUniqueInput {
  id: Float
}